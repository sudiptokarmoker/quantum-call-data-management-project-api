generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// complete
model User {
  id         String  @id @default(uuid())
  uid        String  @default(uuid())
  first_name String
  last_name  String?

  email         String @unique
  mobile_number String @unique

  password String?
  roles    UserRole[] @relation("UserRoleToUser")
  is_admin Boolean    @default(false)

  provider Provider  @default(credentials)
  address  Address[]
  orders   Order[]

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  permissions   Permission[]    @relation("PermissionToUser")
  ProductQA     ProductQA[]
  ProductReview ProductReview[]

  UserRole          UserRole[]
  PCBuilderSave     PCBuilderSave[]
  CameraBuilderSave CameraBuilderSave[]

  UserPersonalDetails UserPersonalDetails[]

  // change name
  @@map("user")
}

// Personal Information
model UserPersonalDetails {
  id String @id @default(uuid())

  image          String?
  gender         Gender? //enum
  marital_status MaritalStatus? //enum
  date_of_birth  DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  User      User     @relation(fields: [userId], references: [id])

  // change name
  @@map("user_personal_details")
}

// address
model Address {
  id               String  @id @default(uuid())
  userId           String
  user             User    @relation(fields: [userId], references: [id])
  address_line_one String
  address_line_two String?
  area             String?
  thana            String
  district         String
  zip_code         String?
  is_default       Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]

  // change name
  @@map("address")
}

// forget password otp => email / mobile_number , otp, expireTime

model ForgetPasswordOTP {
  id            String  @id @default(uuid())
  email         String?
  mobile_number String?

  otp        Int
  expireTime DateTime
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // change name
  @@map("forget_password_otp")
}

// shipping 

model Shipping {
  id         String    @id @default(uuid())
  price      Float
  districtId Int
  district   Districts @relation(fields: [districtId], references: [district_id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // change name
  @@map("shipping")
}

// save pc builder product

model PCBuilderProductSave {
  id            String          @id @default(uuid())
  categorySlug  String          @default("")
  productId     String
  quantity      Int             @default(1)
  product       Product         @relation(fields: [productId], references: [id])
  PCBuilderSave PCBuilderSave[] @relation("PCBuilderSaveToProduct")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// save pc builder

model PCBuilderSave {
  id          String                 @id @default(uuid())
  name        String
  description String?
  userId      String
  user        User                   @relation(fields: [userId], references: [id])
  products    PCBuilderProductSave[] @relation("PCBuilderSaveToProduct")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//save camera builder product
model CameraBuilderProductSave {
  id                String              @id @default(uuid())
  categorySlug      String              @default("")
  productId         String
  quantity          Int                 @default(1)
  product           Product             @relation(fields: [productId], references: [id])
  CameraBuilderSave CameraBuilderSave[] @relation("CameraBuilderSaveToProduct")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// save camera builder
model CameraBuilderSave {
  id          String                     @id @default(uuid())
  name        String
  description String?
  userId      String
  user        User                       @relation(fields: [userId], references: [id])
  products    CameraBuilderProductSave[] @relation("CameraBuilderSaveToProduct")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// category
model Category {
  id          String   @id @default(uuid())
  name        String
  description String   @db.Text
  image_id    Int?
  image       Gallery? @relation(fields: [image_id], references: [id])

  slug        String  @unique
  is_featured Boolean @default(false)
  parent_id   String?
  meta_title  String?

  parent    Category?  @relation("CategoryToCategory", fields: [parent_id], references: [id])
  children  Category[] @relation("CategoryToCategory")
  is_active Boolean    @default(true)

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  products      Product[]       @relation("ProductToCategory")
  PCBuilder     PCBuilder[]
  CameraBuilder CameraBuilder[]

  CanonicalUrl                      String? @db.VarChar(128)
  categorySeoDescription            String? @db.Text
  category_meta_description_in_head String?

  @@map("category")
}

// product
model Product {
  id            String  @id @default(uuid())
  name          String  @db.Text
  specification String  @db.Text
  key_features  String  @db.Text
  description   String? @db.Text

  images      ProductImage[] //gallery image id list
  thumbnailId Int //gallery image id
  thumbnail   Gallery        @relation(name: "ProductThumbnail", fields: [thumbnailId], references: [id])

  // dynamic banner
  dynamic_banner_id Int?
  dynamic_banner    Gallery? @relation(name: "ProductDynamicBanner", fields: [dynamic_banner_id], references: [id])

  selling_price Float
  regular_price Float
  special_price Float?
  stock         Int          @default(0)
  slug          String       @unique @db.VarChar(500)
  is_active     Boolean      @default(true)
  unit          String
  weight        Float?
  tags          Tag[]
  is_featured   Boolean      @default(false)
  product_type  ProductType? @default(physical)
  // sku - auto generate unique id for each product based on category,brand,product name
  sku           String       @unique
  product_code  Int?         @unique

  lowStockAlert Int?            @default(0)
  // seo
  seo_id        String?
  seo           SEO?            @relation(fields: [seo_id], references: [id])
  // outlet
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Brand         Brand?          @relation(fields: [brandId], references: [id])
  brandId       String? //brand id
  outlet        Outlet[]        @relation("ProductToOutlet")
  productQA     ProductQA[]
  productReview ProductReview[]
  category      Category[]      @relation("ProductToCategory")
  watt          Int             @default(0)

  // attribute Attribute[] @relation("ProductToAttribute")
  ProductAttribute         ProductAttribute[]
  PCBuilderProductSave     PCBuilderProductSave[]
  CameraBuilderProductSave CameraBuilderProductSave[]
  parentRelations          PCBuilderRelationalProduct[] @relation("ParentProductRelation")
  relativeRelations        PCBuilderRelationalProduct[] @relation("RelativeProductRelation")

  // Relations with CameraBuilderRelationalProduct
  cameraParentRelations   CameraBuilderRelationalProduct[] @relation("CameraParentProductRelation")
  cameraRelativeRelations CameraBuilderRelationalProduct[] @relation("CameraRelativeProductRelation")

  OrderProduct OrderProduct[]
  CanonicalUrl String?        @db.VarChar(128)

  warranty      Int?
  warranty_time WarrantyTime?
  video_link    String?       @db.VarChar(500)

  product_disclaimer   String?                @db.Text
  Gallery              Gallery?               @relation(fields: [galleryId], references: [id])
  galleryId            Int?
  PopularSearchProduct PopularSearchProduct[]
  Offers               Offers[]               @relation("ProductToOffer")

  // change name
  @@map("product")
}

// unit 

model Unit {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // change name
  @@map("unit")
}

model ProductAttribute {
  id             String           @id @default(uuid())
  productId      String
  product        Product          @relation(fields: [productId], references: [id])
  attributeValue AttributeValue[] @relation("ProductAttributeToAttributeValue")
  atrributeId    String
  attribute      Attribute        @relation(fields: [atrributeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // change name
  @@map("product_attribute")
}

// seo tag

model SEO {
  id                       String    @id @default(uuid())
  title                    String
  description              String
  meta_description_in_head String?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  Product                  Product[]

  @@map("seo")
}

model Tag {
  id        Int     @id @default(autoincrement())
  name      String
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@map("tag")
}

model ProductImage {
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  imageId    Int
  // sort order
  sort_order Int?     @default(0)
  image      Gallery  @relation(fields: [imageId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@id([productId, imageId])
}

// product Media

// outlet
model Outlet {
  id        String    @id @default(uuid())
  name      String
  address   String
  phone     String
  email     String
  is_active Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[] @relation("ProductToOutlet")

  // change name
  @@map("outlet")
}

// attribute

model Attribute {
  id               String             @id @default(uuid())
  name             String
  is_active        Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  AttributeValue   AttributeValue[]
  // ProductAttribute ProductAttribute[]
  ProductAttribute ProductAttribute[]

  // change name
  @@map("attribute")
}

// attribute value
model AttributeValue {
  id               String             @id @default(uuid())
  attributeId      String
  attribute        Attribute          @relation(fields: [attributeId], references: [id])
  value            String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  ProductAttribute ProductAttribute[] @relation("ProductAttributeToAttributeValue")

  // change name
  @@map("attribute_value")
}

model OrderProduct {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [orderId])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  total     Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // change name
  @@map("order_product")
}

model Order {
  id      Int    @id @default(autoincrement())
  orderId String @unique @default("000000")

  userId String
  user   User   @relation(fields: [userId], references: [id])

  addressId      String
  address        Address       @relation(fields: [addressId], references: [id])
  status         OrderStatus   @default(pending)
  subTotal       Float?
  shippingAmount Float?        @default(0)
  discountAmount Float?        @default(0)
  total          Float?
  paymentMethod  PaymentMethod
  isPaid         Boolean       @default(false)

  products OrderProduct[]

  couponId String?
  coupon   Coupon? @relation(fields: [couponId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // change name
  @@index([orderId], name: "orderId")
  @@map("order")
}

// brand
// complete
model Brand {
  id          String    @id @default(uuid())
  name        String
  description String    @db.Text
  // image       String?
  imageId     Int?
  image       Gallery?  @relation(fields: [imageId], references: [id])
  is_active   Boolean   @default(true)
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // change name
  @@map("brand")
}

// Product Q&A
model ProductQA {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  question  String
  answer    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // change name
  @@map("product_qa")
}

// Product Review
model ProductReview {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  rating    Int
  review    String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // status [approved, pending, rejected] - default pending
  status    status   @default(pending)

  // change name
  @@map("product_review")
}

// Blog Management
model Blog {
  id               String   @id @default(uuid())
  title            String
  description      String   @db.Text
  meta_title       String?
  meta_description String?  @db.Text
  image_id         Int?
  image            Gallery? @relation(fields: [image_id], references: [id])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  is_active        Boolean  @default(true)

  BlogCategory   BlogCategory @relation(fields: [blogCategoryId], references: [id])
  blogCategoryId String

  // change name
  @@map("blog")
}

// Blog Category
model BlogCategory {
  id        String   @id @default(uuid())
  name      String
  blogs     Blog[]
  is_active Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // change name
  @@map("blog_category")
}

// FAQ
model FAQ {
  id        String   @id @default(uuid())
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // change name
  @@map("faq")
}

// Contact

model Contact {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // change name
  @@map("contact")
}

// permission group

model PermissionGroup {
  id         String       @id @default(uuid())
  name       String       @unique
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  permission Permission[]

  // change name
  @@map("permission_group")
}

// permission 

model Permission {
  id        String          @id @default(uuid())
  name      String          @unique
  group_id  String
  group     PermissionGroup @relation(fields: [group_id], references: [id])
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  roles     UserRole[]      @relation("UserRoleToPermission")
  users     User[]          @relation("PermissionToUser")

  userRoleId String?

  // change name
  @@map("permission")
}

// roles

model UserRole {
  id   String @id @default(uuid())
  name String @unique

  permissions Permission[] @relation("UserRoleToPermission")
  users       User[]       @relation("UserRoleToUser")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?

  // change name
  @@map("role")
}

model Gallery {
  id           Int            @id @default(autoincrement())
  image        String
  name         String         @default("")
  size         Int?
  type         String?
  Product      Product[]
  ProductImage ProductImage[]
  Brand        Brand[]
  Category     Category[]
  Blog         Blog[]

  SideBannerOne     SideBannerOne[]
  SideBannerTwo     SideBannerTwo[]
  Banner            Banner[]
  PCBuilder         PCBuilder[]
  CameraBuilder     CameraBuilder[]
  ProductImages     Product[]           @relation("ProductThumbnail")
  ProductBanners    Product[]           @relation("ProductDynamicBanner")
  Offers            Offers[]
  HomePageBannerOne HomePageBannerOne[]
  HomePageBannerTwo HomePageBannerTwo[]
}

// banner management

model Banner {
  id          String   @id @default(uuid())
  title       String
  description String   @db.Text
  image_id    Int?
  image       Gallery? @relation(fields: [image_id], references: [id])

  link      String
  is_active Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // change name
  @@map("banner")
}

// side banner

model SideBanner {
  id              Int           @id @default(autoincrement())
  side_banner_one SideBannerOne @relation(fields: [sideBannerOneId], references: [id])
  sideBannerOneId Int
  side_banner_two SideBannerTwo @relation(fields: [sideBannerTwoId], references: [id])
  sideBannerTwoId Int

  is_active Boolean @default(true)

  // change name
  @@map("side_banner")
}

model SideBannerOne {
  id         Int          @id @default(autoincrement())
  imageId    Int
  image      Gallery      @relation(fields: [imageId], references: [id])
  title      String
  link       String
  SideBanner SideBanner[]

  // change name
  @@map("side_banner_one")
}

model SideBannerTwo {
  id         Int          @id @default(autoincrement())
  imageId    Int
  image      Gallery      @relation(fields: [imageId], references: [id])
  title      String
  link       String
  SideBanner SideBanner[]

  // change name
  @@map("side_banner_two")
}

// home page banner

model HomePageBanner {
  id                  String            @id @default(uuid())
  homePageBannerOne   HomePageBannerOne @relation(fields: [homePageBannerOneId], references: [id])
  homePageBannerOneId String
  homePageBannerTwo   HomePageBannerTwo @relation(fields: [homePageBannerTwoId], references: [id])
  homePageBannerTwoId String

  is_active Boolean @default(true)

  // change name
  @@map("home_page_banner")
}

// home page banner one 

model HomePageBannerOne {
  id       String   @id @default(uuid())
  image_id Int?
  image    Gallery? @relation(fields: [image_id], references: [id])

  link      String
  is_active Boolean @default(true)

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  HomePageBanner HomePageBanner[]

  // change name
  @@map("home_page_banner_one")
}

// home page banner two

model HomePageBannerTwo {
  id       String   @id @default(uuid())
  image_id Int?
  image    Gallery? @relation(fields: [image_id], references: [id])

  link      String
  is_active Boolean @default(true)

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  HomePageBanner HomePageBanner[]

  // change name
  @@map("home_page_banner_two")
}

// pc builder

model PCBuilder {
  id            String        @id @default(uuid())
  categoryId    String
  category      Category      @relation(fields: [categoryId], references: [id])
  is_required   Boolean       @default(false)
  logoId        Int
  logo          Gallery       @relation(fields: [logoId], references: [id])
  isMultiple    Boolean       @default(false)
  sort_order    Int           @default(0)
  componentType ComponentType @default(CORE_COMPONENTS)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // change name
  @@map("pc_builder")
}

model PCBuilderRelationalProduct {
  id                String  @id @default(uuid())
  parent_product_id String
  parentProduct     Product @relation("ParentProductRelation", fields: [parent_product_id], references: [id])

  // multiple product relation
  relative_product_id String
  relativeProduct     Product @relation("RelativeProductRelation", fields: [relative_product_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([parent_product_id, relative_product_id])
  @@map("pc_builder_relational_product")
}

model CameraBuilderRelationalProduct {
  id                String  @id @default(uuid())
  parent_product_id String
  parentProduct     Product @relation("CameraParentProductRelation", fields: [parent_product_id], references: [id])

  relative_product_id String

  relativeProduct Product @relation("CameraRelativeProductRelation", fields: [relative_product_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([parent_product_id, relative_product_id])
  @@map("camera_builder_relational_product")
}

// camera builder
model CameraBuilder {
  id            String        @id @default(uuid())
  categoryId    String
  category      Category      @relation(fields: [categoryId], references: [id])
  is_required   Boolean       @default(false)
  logoId        Int
  logo          Gallery       @relation(fields: [logoId], references: [id])
  isMultiple    Boolean       @default(false)
  sort_order    Int           @default(0)
  componentType ComponentType @default(CORE_COMPONENTS)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // change name
  @@map("camera_builder")
}

// divitions

model Divitions {
  division_id Int      @id @unique
  name        String
  bn_name     String
  lat         Float
  long        Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  districts Districts[]

  // change name
  @@map("divitions")
}

// districts

model Districts {
  district_id Int        @id @unique
  name        String
  bn_name     String
  lat         Float
  long        Float
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Divitions   Divitions? @relation(fields: [division_id], references: [division_id])
  division_id Int?
  Shipping    Shipping[]

  // change name
  @@map("districts")
}

// home seo

model HomeSEO {
  id          String   @id @default(uuid())
  title       String   @default("")
  description String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // change name
  @@map("home_seo")
}

// become dealer 

model BecomeDealer {
  id          String   @id @default(uuid())
  name        String
  email       String
  number      String
  companyName String
  message     String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // change name
  @@map("become_dealer")
}

// populer search product

model PopularSearchProduct {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  count     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // change name
  @@map("popular_search_product")
}

// Track customer Search volume

model SearchVolume {
  id        String   @id @default(uuid())
  keyword   String
  count     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // change name
  @@map("search_volume")
}

// terms and condition

model TermsAndCondition {
  id          String   @id @default(uuid())
  description String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // change name
  @@map("terms_and_condition")
}

// offers 
model Offers {
  id             Int          @id @default(autoincrement())
  title          String
  description    String       @db.Text
  banner_id      Int
  banner         Gallery      @relation(fields: [banner_id], references: [id])
  offerStartTime DateTime     @default(now())
  offerEndTime   DateTime
  offerType      offerType    @default(store)
  discountType   discountType @default(percentage)
  discount       Float
  product        Product[]    @relation("ProductToOffer")
  isShowedHome   Boolean      @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Coupon {
  id                String       @id @default(uuid())
  code              String       @unique @default("")
  discountAmount    Float        @default(0)
  discountType      DiscountType @default(fixed)
  expirationDate    DateTime     @default(now())
  minPurchaseAmount Float?
  maxUsage          Int?
  usedCount         Int          @default(0)
  isActive          Boolean      @default(true)
  description       String?

  // Relations
  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("coupon")
}

enum DiscountType {
  fixed
  percentage
}

// Pixel setup

model Pixel {
  id        Int      @id @default(autoincrement())
  // pixel id
  slug      String   @unique
  tag       String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // change name
  @@map("pixel")
}

enum coupon_discount_by {
  price
  percentage
}

enum coupon_type {
  product
  category
}

enum offerType {
  store
  online
}

enum discountType {
  percentage
  fixed
}

// status

enum status {
  pending
  approved
  rejected
}

// order status

enum OrderStatus {
  pending
  confirmed
  processing
  completed
  cancelled
}

// payment method

enum PaymentMethod {
  cash_on_delivery
  online_payment
}

enum ComponentType {
  CORE_COMPONENTS
  PERIPHERALS_AND_OTHERS
}

enum Role {
  user
  admin
}

enum Provider {
  credentials
  google
  facebook
}

// gender
enum Gender {
  male
  female
  other
}

// marital_status
enum MaritalStatus {
  unmarried
  married
  divorced
  widowed
}

// product type

enum ProductType {
  physical
  digital
}

enum WarrantyTime {
  day
  month
  year
}
